Index: gtkhtml3/gtkhtml/testgtkhtml.c
===================================================================
--- gtkhtml3.orig/gtkhtml/testgtkhtml.c
+++ gtkhtml3/gtkhtml/testgtkhtml.c
@@ -17,29 +17,27 @@
 */
 
 #include "config.h"
-#include <glib/gi18n.h>
-#include <gnome.h>
-#include <bonobo.h>
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/stat.h>
 #include <sys/types.h>
+#include <unistd.h>
 
 #include <glib.h>
+#include <glib/gi18n.h>
 #include <glib/gstdio.h>
-#include <sys/stat.h>
-#include <fcntl.h>
 
 #include <gtk/gtk.h>
 
 #ifdef G_OS_WIN32
 /* Clashes with objidl.h, which gets included through a chain of includes from libsoup/soup.h */
-#undef DATADIR			
+#undef DATADIR
 #endif
 
 #include <libsoup/soup.h>
-#include <sys/stat.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <unistd.h>
-#include <string.h>
 
 #include "config.h"
 #include "gtkhtml.h"
@@ -51,10 +49,21 @@
 
 #include "gtkhtmldebug.h"
 
+/* backward-compatibility cruft */
+#include "gtk-compat.h"
+
 #ifndef O_BINARY
 #define O_BINARY 0
 #endif
 
+typedef struct _Example Example;
+
+struct _Example {
+	const gchar *filename;
+	const gchar *title;
+};
+static GPtrArray *examples;
+
 typedef struct {
   FILE *fil;
   GtkHTMLStream *handle;
@@ -69,11 +78,11 @@ typedef struct {
 #define MAX_GO_ENTRIES 20
 
 static void exit_cb (GtkWidget *widget, gpointer data);
+#ifndef DISABLE_PRINTING
 static void print_preview_cb (GtkWidget *widget, gpointer data);
-static void test_cb (GtkWidget *widget, gpointer data);
+#endif
 static void bug_cb (GtkWidget *widget, gpointer data);
-static void slow_cb (GtkWidget *widget, gpointer data);
-static void animate_cb (GtkWidget *widget, gpointer data);
+static void animate_cb (GtkToggleButton *togglebutton, gpointer data);
 static void stop_cb (GtkWidget *widget, gpointer data);
 static void dump_cb (GtkWidget *widget, gpointer data);
 static void dump_simple_cb (GtkWidget *widget, gpointer data);
@@ -85,9 +94,9 @@ static void redraw_cb (GtkWidget *widget
 static void resize_cb (GtkWidget *widget, gpointer data);
 static void select_all_cb (GtkWidget *widget, gpointer data);
 static void title_changed_cb (GtkHTML *html, const gchar *title, gpointer data);
-static void url_requested (GtkHTML *html, const char *url, GtkHTMLStream *handle, gpointer data);
-static void entry_goto_url(GtkWidget *widget, gpointer data);
-static void goto_url(const char *url, int back_or_forward);
+static void url_requested (GtkHTML *html, const gchar *url, GtkHTMLStream *handle, gpointer data);
+static void entry_goto_url (GtkWidget *widget, gpointer data);
+static void goto_url (const gchar *url, gint back_or_forward);
 static void on_set_base (GtkHTML *html, const gchar *url, gpointer data);
 
 static gchar *parse_href (const gchar *s);
@@ -96,188 +105,382 @@ static SoupSession *session;
 
 static GtkHTML *html;
 static GtkHTMLStream *html_stream_handle = NULL;
-/* static GtkWidget *animator; */
 static GtkWidget *entry;
 static GtkWidget *popup_menu, *popup_menu_back, *popup_menu_forward, *popup_menu_home;
 static GtkWidget *toolbar_back, *toolbar_forward;
+static GtkWidget *statusbar;
 static HTMLURL *baseURL = NULL;
 
 static GList *go_list;
-static int go_position;
-
-static gboolean slow_loading = FALSE;
+static gint go_position;
 
 static gint redirect_timerId = 0;
 static gchar *redirect_url = NULL;
 
-static GnomeUIInfo file_menu [] = {
-	{ GNOME_APP_UI_ITEM, N_("Print pre_view"), N_("Print preview"),
-	  print_preview_cb },
-	GNOMEUIINFO_SEPARATOR,
-	GNOMEUIINFO_MENU_EXIT_ITEM (exit_cb, NULL),
-	GNOMEUIINFO_END
-};
+static GtkActionEntry entries[] = {
 
-static GnomeUIInfo test_menu[] = {
-	{ GNOME_APP_UI_ITEM, "Test 1", "Run test 1",
-	  test_cb, GINT_TO_POINTER (1), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 2", "Run test 2",
-	  test_cb, GINT_TO_POINTER (2), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 3", "Run test 3",
-	  test_cb, GINT_TO_POINTER (3), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 4", "Run test 4",
-	  test_cb, GINT_TO_POINTER (4), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 5", "Run test 5",
-	  test_cb, GINT_TO_POINTER (5), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 6", "Run test 6",
-	  test_cb, GINT_TO_POINTER (6), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 7", "Run test 7 (FreshMeat)",
-	  test_cb, GINT_TO_POINTER (7), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 8", "Run test 8 (local test)",
-	  test_cb, GINT_TO_POINTER (8), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 9", "Run test 9 (Form Test)",
-	  test_cb, GINT_TO_POINTER (9), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 10", "Run test 10 (Object Test)",
-	  test_cb, GINT_TO_POINTER (10), NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Test 11", "Run test 11 (Nowrap)",
-	  test_cb, GINT_TO_POINTER (11), NULL, 0, NULL, 0, 0},
-	GNOMEUIINFO_END
+	{ "FileMenu",
+	  NULL,
+	  "_File",
+	  NULL,
+	  NULL },
+
+	{ "DebugMenu",
+	  NULL,
+	  "_Debug",
+	  NULL,
+	  NULL },
+#ifndef DISABLE_PRINTING
+	{ "Preview",
+	  GTK_STOCK_PRINT_PREVIEW,
+	  NULL,
+	  NULL,
+	  NULL,
+	  G_CALLBACK (print_preview_cb) },
+#endif
+	{ "Quit",
+	  GTK_STOCK_QUIT,
+	  NULL,
+	  NULL,
+	  NULL,
+	  G_CALLBACK (exit_cb) },
+
+	{ "DumpObjectTree",
+	  NULL,
+	  "Dump _Object tree",
+	  "<control>o",
+	  NULL,
+	  G_CALLBACK (dump_cb) },
+
+	{ "DumpObjectTreeSimple",
+	  NULL,
+	  "Dump Object tree (_simple)",
+	  "<control>s",
+	  NULL,
+	  G_CALLBACK (dump_simple_cb) },
+
+	{ "ForceRepaint",
+	  NULL,                   /* name, stock id */
+	  "Force _Repaint",
+	  "<control>r",         /* label, accelerator */
+	  "ForceRepaint",                         /* tooltip */
+	  G_CALLBACK (redraw_cb) },
+
+	{ "ForceResize",
+	  NULL,
+	  "Force R_esize",
+	  "<control>e",
+	  NULL,
+	  G_CALLBACK (resize_cb) },
+
+	{ "SelectAll",
+	  NULL,
+	  "Select _All",
+	  "<control>a",
+	  NULL,
+	  G_CALLBACK (select_all_cb)},
+
+	{ "ShowBugList",
+	  NULL,
+	  "Show _Bug List",
+	  "<control>b",
+	  "ShowBugList",
+	  G_CALLBACK (bug_cb)},
 };
 
-static GnomeUIInfo debug_menu[] = {
-	{ GNOME_APP_UI_ITEM, "Show bug list", "Show the layout bug list",
-	  bug_cb, NULL, NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Dump Object tree", "Dump Object tree to stdout",
-	  dump_cb, NULL, NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Dump Object tree (simple)", "Dump Simple Object tree to stdout",
-	  dump_simple_cb, NULL, NULL, 0, NULL, 0, 0},
-	GNOMEUIINFO_TOGGLEITEM("Slow loading", "Load documents slowly", slow_cb, NULL),
-	{ GNOME_APP_UI_ITEM, "Force resize", "Force a resize event",
-	  resize_cb, NULL, NULL, 0, NULL, 0 },
-	{ GNOME_APP_UI_ITEM, "Force repaint", "Force a repaint event",
-	  redraw_cb, NULL, NULL, 0, NULL, 0 },
-	{ GNOME_APP_UI_ITEM, "Select all", "Select all",
-	  select_all_cb, NULL, NULL, 0, NULL, 0 },
-	GNOMEUIINFO_TOGGLEITEM ("Disable Animations", "Disable Animated Images",  animate_cb, NULL),
+static const gchar *ui_info =
+"<ui>"
+"  <menubar name='MenuBar'>"
+"    <menu action='FileMenu'>"
+#ifndef DISABLE_PRINTING
+"      <menuitem action='Preview'/>"
+"      <separator/>"
+#endif
+"      <menuitem action='Quit'/>"
+"    </menu>"
+"    <menu action='DebugMenu'>"
+"       <menuitem action='ShowBugList'/>"
+"       <menuitem action='DumpObjectTree'/>"
+"       <menuitem action='DumpObjectTreeSimple'/>"
+"       <menuitem action='ForceResize'/>"
+"       <menuitem action='ForceRepaint'/>"
+"       <menuitem action='SelectAll'/>"
+"    </menu>"
+"  </menubar>"
+"</ui>";
+
+/* find examples*/
+static void
+example_changed_cb (GtkComboBox *combo_box, gpointer data)
+{
+	gint i = gtk_combo_box_get_active (combo_box);
+	Example *example = examples->pdata[i];
 
-	GNOMEUIINFO_END
-};
+	if (example->filename) {
+		goto_url (example->filename, 0);
+	} else
+		goto_url("http://www.gnome.org", 0);
+}
 
-static GnomeUIInfo go_menu[] = {
-	{ GNOME_APP_UI_ITEM, "Back", "Return to the previous page in history list",
-	  back_cb, NULL, NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Forward", "Go to the next page in history list",
-	  forward_cb, NULL, NULL, 0, NULL, 0, 0},
-	{ GNOME_APP_UI_ITEM, "Home", "Go to the homepage",
-	  home_cb, NULL, NULL, 0, NULL, 0 },
-	GNOMEUIINFO_SEPARATOR,
-	GNOMEUIINFO_END
-};
+/* We want to sort "a2" < "b1" < "B1" < "b2" < "b12". Vastly
+ * overengineered
+ */
+static gint
+compare_examples (gconstpointer a,
+		  gconstpointer b)
+{
+	const Example *example_a = *(const Example *const *)a;
+	const Example *example_b = *(const Example *const *)b;
+	gchar *a_fold, *b_fold;
+	const guchar *p, *q;
+	gint result = 0;
+
+	/* Special case "Welcome" to sort first */
+	if (!example_a->filename)
+		return -1;
+	if (!example_b->filename)
+		return 1;
+
+	a_fold = g_utf8_casefold (example_a->title, -1);
+	b_fold = g_utf8_casefold (example_b->title, -1);
+	p = (const guchar *)a_fold;
+	q = (const guchar *)b_fold;
+
+	while (*p && *q) {
+		gboolean p_digit = g_ascii_isdigit (*p);
+		gboolean q_digit = g_ascii_isdigit (*q);
+
+		if (p_digit && !q_digit) {
+			result = 1;
+			goto out;
+		}
+		else if (!p_digit && q_digit) {
+			result = -1;
+			goto out;
+		}
 
-static GnomeUIInfo main_menu[] = {
-	GNOMEUIINFO_MENU_FILE_TREE (file_menu),
-	GNOMEUIINFO_SUBTREE (("_Tests"), test_menu),
-	GNOMEUIINFO_SUBTREE (("_Debug"), debug_menu),
-	GNOMEUIINFO_SUBTREE (("_Go"), go_menu),
-	GNOMEUIINFO_END
-};
+		if (p_digit) {
+			gint num_a = atoi ((const gchar *) p);
+			gint num_b = atoi ((const gchar *) q);
+
+			if (num_a < num_b) {
+				result = -1;
+				goto out;
+			}
+			else if (num_a > num_b) {
+				result = 1;
+				goto out;
+			}
+
+			while (g_ascii_isdigit (*p))
+				p++;
+			while (g_ascii_isdigit (*q))
+				q++;
+
+		} else {
+			gint p_len = 1, q_len = 1;
+			gchar *p_str, *q_str;
+
+			while (*(p + p_len) && !g_ascii_isdigit (*(p + p_len)))
+				p_len++;
+			while (*(q + q_len) && !g_ascii_isdigit (*(q + q_len)))
+				q_len++;
+
+			p_str = g_strndup ((gchar *) p, p_len);
+			q_str = g_strndup ((gchar *) q, q_len);
+
+			result = g_utf8_collate (p_str, q_str);
+			g_free (p_str);
+			g_free (q_str);
+
+			if (result != 0)
+				goto out;
+
+			p += p_len;
+			q += p_len;
+		}
+
+		p++;
+		q++;
+	}
+
+	if (*p)
+		result = 1;
+	else if (*q)
+		result = -1;
+	else
+		result = g_utf8_collate (example_a->title, example_b->title);
+
+ out:
+	g_free (a_fold);
+	g_free (b_fold);
+
+	return result;
+}
 
 static void
-create_toolbars (GtkWidget *app)
+find_examples (void)
+{
+	GDir *dir;
+	GError *error = NULL;
+	gchar *cwd;
+	Example *example;
+
+	examples = g_ptr_array_new ();
+
+	example = g_new (Example, 1);
+	example->filename = NULL;
+	example->title = "Home";
+	g_ptr_array_add (examples, example);
+
+	dir = g_dir_open ("tests", 0, &error);
+	if (!dir) {
+		g_printerr ("Cannot open tests directory: %s\n", error->message);
+		return;
+	}
+	cwd = g_get_current_dir ();
+	while (TRUE) {
+		const gchar *name = g_dir_read_name (dir);
+
+		if (!name)
+			break;
+		if (!g_str_has_suffix (name, ".html"))
+			continue;
+
+		example = g_new (Example, 1);
+		example->filename = g_strdup_printf ("file://%s/tests/%s",
+					cwd,
+					name);
+		example->title = g_strndup (name, strlen (name) - 5);
+
+		g_ptr_array_add (examples, example);
+		qsort (examples->pdata, examples->len, sizeof (gpointer), compare_examples);
+	}
+
+	g_dir_close (dir);
+}
+/* find exaples */
+
+static GtkWidget *
+create_toolbars ()
 {
-	GtkWidget *dock;
-	GtkWidget *hbox;
-	GtkWidget *frame;
-	GtkWidget *toolbar;
+	gint i;
+	GtkWidget  *animate_checkbox;
+	GtkWidget  *test_combo_box;
+	GtkWidget  *label;
 	GtkToolItem *item;
-	/* char *imgloc; */
+	GtkWidget *action_table;
 
-	dock = bonobo_dock_item_new ("testgtkhtml-toolbar1",
-				    (BONOBO_DOCK_ITEM_BEH_EXCLUSIVE));
-	hbox = gtk_hbox_new (FALSE, 0);
-	gtk_container_add (GTK_CONTAINER (dock), hbox);
-	gtk_container_set_border_width (GTK_CONTAINER (dock), 2);
-
-	toolbar = gtk_toolbar_new ();
-	gtk_toolbar_set_style (GTK_TOOLBAR (toolbar), GTK_TOOLBAR_ICONS);
-	gtk_box_pack_start (GTK_BOX (hbox), toolbar, FALSE, FALSE, 0);
+	action_table = gtk_table_new (9, 1, FALSE);
 
 	item = gtk_tool_button_new_from_stock (GTK_STOCK_GO_BACK);
 	gtk_tool_item_set_tooltip_text (item, "Move back");
 	g_signal_connect (item, "clicked", G_CALLBACK (back_cb), NULL);
-	gtk_toolbar_insert (GTK_TOOLBAR (toolbar), item, -1);
 	gtk_widget_set_sensitive (GTK_WIDGET (item), FALSE);
 	toolbar_back = GTK_WIDGET (item);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		GTK_WIDGET (item),
+		/* X direction */       /* Y direction */
+		0, 1,                   0, 1,
+		GTK_SHRINK,			GTK_SHRINK,
+		0,                      0);
 
 	item = gtk_tool_button_new_from_stock (GTK_STOCK_GO_FORWARD);
 	gtk_tool_item_set_tooltip_text (item, "Move forward");
 	g_signal_connect (item, "clicked", G_CALLBACK (forward_cb), NULL);
-	gtk_toolbar_insert (GTK_TOOLBAR (toolbar), item, -1);
 	gtk_widget_set_sensitive (GTK_WIDGET (item), FALSE);
 	toolbar_forward = GTK_WIDGET (item);
-
-	item = gtk_separator_tool_item_new ();
-	gtk_toolbar_insert (GTK_TOOLBAR (toolbar), item, -1);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		GTK_WIDGET (item),
+		/* X direction */       /* Y direction */
+		1, 2,                   0, 1,
+		GTK_SHRINK,			GTK_SHRINK,
+		0,                      0);
 
 	item = gtk_tool_button_new_from_stock (GTK_STOCK_STOP);
 	gtk_tool_item_set_tooltip_text (item, "Stop loading");
 	g_signal_connect (item, "clicked", G_CALLBACK (stop_cb), NULL);
-	gtk_toolbar_insert (GTK_TOOLBAR (toolbar), item, -1);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		GTK_WIDGET (item),
+		/* X direction */       /* Y direction */
+		2, 3,                   0, 1,
+		GTK_SHRINK,			GTK_SHRINK,
+		0,                      0);
 
 	item = gtk_tool_button_new_from_stock (GTK_STOCK_REFRESH);
 	gtk_tool_item_set_tooltip_text (item, "Reload page");
 	g_signal_connect (item, "clicked", G_CALLBACK (reload_cb), NULL);
-	gtk_toolbar_insert (GTK_TOOLBAR (toolbar), item, -1);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		GTK_WIDGET (item),
+		/* X direction */       /* Y direction */
+		3, 4,                   0, 1,
+		GTK_SHRINK,			GTK_SHRINK,
+		0,                      0);
 
 	item = gtk_tool_button_new_from_stock (GTK_STOCK_HOME);
 	gtk_tool_item_set_tooltip_text (item, "Home page");
 	g_signal_connect (item, "clicked", G_CALLBACK (home_cb), NULL);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		GTK_WIDGET (item),
+		/* X direction */       /* Y direction */
+		4, 5,                   0, 1,
+		GTK_SHRINK,			GTK_SHRINK,
+		0,                      0);
+
+	label = gtk_label_new ("Location:");
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		label,
+		/* X direction */       /* Y direction */
+		5, 6,                   0, 1,
+		GTK_SHRINK,			GTK_SHRINK,
+		0,                      0);
 
-	item = gtk_separator_tool_item_new ();
-	gtk_toolbar_insert (GTK_TOOLBAR (toolbar), item, -1);
-
-	/* animator = gnome_animator_new_with_size (32, 32);
-
-	if (g_file_exists("32.png"))
-	  imgloc = "32.png";
-	else if (g_file_exists(SRCDIR "/32.png"))
-	  imgloc = SRCDIR "/32.png";
-	else
-	  imgloc = "32.png";
-	gnome_animator_append_frames_from_file_at_size (GNOME_ANIMATOR (animator),
-							imgloc,
-							0, 0,
-							25,
-							32,
-							32, 32); */
-
-	frame = gtk_frame_new (NULL);
-	/* TODO2 gtk_container_add (GTK_CONTAINER (frame), animator); */
-	gtk_frame_set_shadow_type (GTK_FRAME (frame), GTK_SHADOW_IN);
-	gtk_box_pack_end (GTK_BOX (hbox), frame, FALSE, FALSE, 0);
-	/* gnome_animator_set_loop_type (GNOME_ANIMATOR (animator),
-	   GNOME_ANIMATOR_LOOP_RESTART); */
-	gtk_widget_show_all (dock);
-	bonobo_dock_add_item (BONOBO_DOCK (GNOME_APP (app)->dock),
-			      BONOBO_DOCK_ITEM (dock), BONOBO_DOCK_TOP, 1, 0, 0, FALSE);
-
-	/* Create the location bar */
-	dock = bonobo_dock_item_new ("testgtkhtml-toolbar2",
-				     (BONOBO_DOCK_ITEM_BEH_EXCLUSIVE));
-	hbox = gtk_hbox_new (FALSE, 2);
-	gtk_container_add (GTK_CONTAINER (dock), hbox);
-	gtk_container_set_border_width (GTK_CONTAINER (dock), 2);
-	gtk_box_pack_start (GTK_BOX (hbox),
-			    gtk_label_new ("Location:"), FALSE, FALSE, 0);
 	entry = gtk_entry_new ();
 	g_signal_connect (entry, "activate", G_CALLBACK (entry_goto_url), NULL);
-	gtk_box_pack_start (GTK_BOX (hbox),
-			    entry, TRUE, TRUE, 0);
-	bonobo_dock_add_item (BONOBO_DOCK (GNOME_APP (app)->dock),
-			      BONOBO_DOCK_ITEM (dock), BONOBO_DOCK_TOP, 2, 0, 0, FALSE);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		entry,
+		/* X direction */       /* Y direction */
+		6, 7,                   0, 1,
+		GTK_EXPAND | GTK_FILL,  GTK_EXPAND | GTK_FILL,
+		0,                      0);
+
+	find_examples ();
+	test_combo_box = gtk_combo_box_text_new ();
+	for (i = 0; i < examples->len; i++) {
+		Example *example = examples->pdata[i];
+		gtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (test_combo_box), example->title);
+	}
+	gtk_combo_box_set_active (GTK_COMBO_BOX (test_combo_box), 0);
+	g_signal_connect (test_combo_box, "changed", G_CALLBACK (example_changed_cb), NULL);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		test_combo_box,
+		/* X direction */       /* Y direction */
+		7, 8,                   0, 1,
+		GTK_SHRINK,  GTK_SHRINK,
+		0,                      0);
+
+	animate_checkbox = gtk_check_button_new_with_label ("Disable Animations");
+	g_signal_connect (animate_checkbox, "toggled", G_CALLBACK (animate_cb), NULL);
+	gtk_table_attach (
+		GTK_TABLE (action_table),
+		animate_checkbox,
+		/* X direction */       /* Y direction */
+		8, 9,                   0, 1,
+		GTK_SHRINK,  GTK_SHRINK,
+		0,                      0);
 
+	return action_table;
 }
 
+#ifndef DISABLE_PRINTING
 static gint page_num, pages;
 static PangoLayout *layout;
 
@@ -315,7 +518,7 @@ draw_page_cb (GtkPrintOperation *operati
 	PangoFontMetrics *metrics;
 	gdouble footer_height;
 
-	desc = pango_font_description_from_string ("Helvetica 12");
+	desc = pango_font_description_from_string ("Helvetica 16px");
 
 	layout = gtk_print_context_create_pango_layout (context);
 	pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
@@ -359,6 +562,7 @@ print_preview_cb (GtkWidget *widget,
 
 	g_object_unref (operation);
 }
+#endif
 
 static void
 dump_cb (GtkWidget *widget, gpointer data)
@@ -400,15 +604,9 @@ redraw_cb (GtkWidget *widget, gpointer d
 }
 
 static void
-slow_cb (GtkWidget *widget, gpointer data)
-{
-	slow_loading = !slow_loading;
-}
-
-static void
-animate_cb (GtkWidget *widget, gpointer data)
+animate_cb (GtkToggleButton *togglebutton, gpointer data)
 {
-	/* gtk_html_set_animate (html, !gtk_html_get_animate (html)); */
+	gtk_html_set_animate (html, !gtk_toggle_button_get_mode (togglebutton));
 }
 
 static void
@@ -422,14 +620,14 @@ title_changed_cb (GtkHTML *html, const g
 }
 
 static void
-entry_goto_url(GtkWidget *widget, gpointer data)
+entry_goto_url (GtkWidget *widget, gpointer data)
 {
 	gchar *tmpurl;
 
 	tmpurl = g_strdup (gtk_entry_get_text (GTK_ENTRY (widget)));
 
 	/* Add "http://" if no protocol is specified */
-	if(strchr(tmpurl, ':')) {
+	if (strchr (tmpurl, ':')) {
 		on_set_base (NULL, tmpurl, NULL);
 		goto_url (tmpurl, 0);
 	} else {
@@ -438,7 +636,7 @@ entry_goto_url(GtkWidget *widget, gpoint
 		url = g_strdup_printf("http://%s", tmpurl);
 		on_set_base (NULL, url, NULL);
 		goto_url (url, 0);
-		g_free(url);
+		g_free (url);
 	}
 	g_free (tmpurl);
 }
@@ -456,18 +654,16 @@ back_cb (GtkWidget *widget, gpointer dat
 
 	go_position++;
 
-	if((item = g_list_nth_data(go_list, go_position))) {
+	if ((item = g_list_nth_data (go_list, go_position))) {
+
+		goto_url (item->url, 1);
+		gtk_widget_set_sensitive (popup_menu_forward, TRUE);
+		gtk_widget_set_sensitive (toolbar_forward, TRUE);
 
-		goto_url(item->url, 1);
-		gtk_widget_set_sensitive(popup_menu_forward, TRUE);
-		gtk_widget_set_sensitive(toolbar_forward, TRUE);
-		gtk_widget_set_sensitive(go_menu[1].widget, TRUE);
-
-		if(go_position == (g_list_length(go_list) - 1)) {
-
-			gtk_widget_set_sensitive(popup_menu_back, FALSE);
-			gtk_widget_set_sensitive(toolbar_back, FALSE);
-			gtk_widget_set_sensitive(go_menu[0].widget, FALSE);
+		if (go_position == (g_list_length (go_list) - 1)) {
+
+			gtk_widget_set_sensitive (popup_menu_back, FALSE);
+			gtk_widget_set_sensitive (toolbar_back, FALSE);
 		}
 
 	} else
@@ -481,18 +677,16 @@ forward_cb (GtkWidget *widget, gpointer
 
 	go_position--;
 
-	if((go_position >= 0) && (item = g_list_nth_data(go_list, go_position))) {
+	if ((go_position >= 0) && (item = g_list_nth_data (go_list, go_position))) {
+
+		goto_url (item->url, 1);
 
-		goto_url(item->url, 1);
+		gtk_widget_set_sensitive (popup_menu_back, TRUE);
+		gtk_widget_set_sensitive (toolbar_back, TRUE);
 
-		gtk_widget_set_sensitive(popup_menu_back, TRUE);
-		gtk_widget_set_sensitive(toolbar_back, TRUE);
-		gtk_widget_set_sensitive(go_menu[0].widget, TRUE);
-
-		if(go_position == 0) {
-			gtk_widget_set_sensitive(popup_menu_forward, FALSE);
-			gtk_widget_set_sensitive(toolbar_forward, FALSE);
-			gtk_widget_set_sensitive(go_menu[1].widget, FALSE);
+		if (go_position == 0) {
+			gtk_widget_set_sensitive (popup_menu_forward, FALSE);
+			gtk_widget_set_sensitive (toolbar_forward, FALSE);
 		}
 	} else
 		go_position++;
@@ -503,9 +697,9 @@ reload_cb (GtkWidget *widget, gpointer d
 {
 	go_item *item;
 
-	if((item = g_list_nth_data(go_list, go_position))) {
+	if ((item = g_list_nth_data (go_list, go_position))) {
 
-		goto_url(item->url, 1);
+		goto_url (item->url, 1);
 	}
 }
 
@@ -520,14 +714,14 @@ stop_cb (GtkWidget *widget, gpointer dat
 static void
 load_done (GtkHTML *html)
 {
-	/* TODO2 gnome_animator_stop (GNOME_ANIMATOR (animator));
-	gnome_animator_goto_frame (GNOME_ANIMATOR (animator), 1);
+	/* TODO2 animator stop
 
 	if (exit_when_done)
-	gtk_main_quit(); */
+		gtk_main_quit ();
+	*/
 }
 
-static int
+static gint
 on_button_press_event (GtkWidget *widget, GdkEventButton *event)
 {
 	GtkMenu *menu;
@@ -535,9 +729,6 @@ on_button_press_event (GtkWidget *widget
 	g_return_val_if_fail (widget != NULL, FALSE);
 	g_return_val_if_fail (event != NULL, FALSE);
 
-	/* The "widget" is the menu that was supplied when
-	 * gtk_signal_connect_object was called.
-	 */
 	menu = GTK_MENU (popup_menu);
 
 	if (event->type == GDK_BUTTON_PRESS) {
@@ -569,7 +760,7 @@ on_set_base (GtkHTML *html, const gchar
 static gboolean
 redirect_timer_event (gpointer data) {
 	g_print("Redirecting to '%s' NOW\n", redirect_url);
-	goto_url(redirect_url, 0);
+	goto_url (redirect_url, 0);
 
 	/*	OBS: redirect_url is freed in goto_url */
 
@@ -577,14 +768,14 @@ redirect_timer_event (gpointer data) {
 }
 
 static void
-on_redirect (GtkHTML *html, const gchar *url, int delay, gpointer data) {
+on_redirect (GtkHTML *html, const gchar *url, gint delay, gpointer data) {
 	g_print("Redirecting to '%s' in %d seconds\n", url, delay);
 
-	if(redirect_timerId == 0) {
+	if (redirect_timerId == 0) {
 
-		redirect_url = g_strdup(url);
+		redirect_url = g_strdup (url);
 
-		redirect_timerId = g_timeout_add (delay * 1000,(GtkFunction) redirect_timer_event, NULL);
+		redirect_timerId = g_timeout_add (delay * 1000,(GSourceFunc) redirect_timer_event, NULL);
 	}
 }
 
@@ -594,12 +785,12 @@ on_submit (GtkHTML *html, const gchar *m
 
 	g_print("submitting '%s' to '%s' using method '%s'\n", encoding, action, method);
 
-	if(g_ascii_strcasecmp(method, "GET") == 0) {
+	if (g_ascii_strcasecmp(method, "GET") == 0) {
 
 		tmpstr = g_string_append_c (tmpstr, '?');
 		tmpstr = g_string_append (tmpstr, encoding);
 
-		goto_url(tmpstr->str, 0);
+		goto_url (tmpstr->str, 0);
 
 		g_string_free (tmpstr, TRUE);
 	} else {
@@ -609,16 +800,28 @@ on_submit (GtkHTML *html, const gchar *m
 }
 
 static void
-on_url (GtkHTML *html, const gchar *url, gpointer data)
+change_status_bar (GtkStatusbar * statusbar, const gchar * text)
 {
-	GnomeApp *app;
+	gchar *msg;
 
-	app = GNOME_APP (data);
-
-	if (url == NULL)
-		gnome_appbar_set_status (GNOME_APPBAR (app->statusbar), "");
+	if (!text)
+		msg = g_strdup ("");
 	else
-		gnome_appbar_set_status (GNOME_APPBAR (app->statusbar), url);
+		msg = g_strdup (text);
+
+	gtk_statusbar_pop (statusbar, 0);
+	 /* clear any previous message,
+	  * underflow is allowed
+	  */
+	gtk_statusbar_push (statusbar, 0, msg);
+
+	g_free (msg);
+}
+
+static void
+on_url (GtkHTML *html, const gchar *url, gpointer data)
+{
+	change_status_bar (GTK_STATUSBAR (statusbar), url);
 }
 
 static void
@@ -628,24 +831,24 @@ on_link_clicked (GtkHTML *html, const gc
 }
 
 /* simulate an async object isntantiation */
-static int
-object_timeout(GtkHTMLEmbedded *eb)
+static gboolean
+object_timeout (GtkHTMLEmbedded *eb)
 {
 	GtkWidget *w;
 
-	w = gtk_check_button_new();
-	gtk_widget_show(w);
+	w = gtk_check_button_new ();
+	gtk_widget_show (w);
 
 	printf("inserting custom widget after a delay ...\n");
-	gtk_html_embedded_set_descent(eb, rand()%8);
-	gtk_container_add (GTK_CONTAINER(eb), w);
+	gtk_html_embedded_set_descent (eb, rand ()%8);
+	gtk_container_add (GTK_CONTAINER (eb), w);
 	g_object_unref (eb);
 
 	return FALSE;
 }
 
 static gboolean
-object_requested_cmd (GtkHTML *html, GtkHTMLEmbedded *eb, void *data)
+object_requested_cmd (GtkHTML *html, GtkHTMLEmbedded *eb, gpointer data)
 {
 	/* printf("object requested, wiaint a bit before creating it ...\n"); */
 
@@ -653,7 +856,7 @@ object_requested_cmd (GtkHTML *html, Gtk
 		return FALSE;
 
 	g_object_ref (eb);
-	g_timeout_add(rand() % 5000 + 1000, (GtkFunction) object_timeout, eb);
+	g_timeout_add (rand () % 5000 + 1000, (GSourceFunc) object_timeout, eb);
 	/* object_timeout (eb); */
 
 	return TRUE;
@@ -671,8 +874,8 @@ got_data (SoupSession *session, SoupMess
 		return;
 	}
 	/* Enable change content type in engine */
-	gtk_html_set_default_engine(html, TRUE);
-	
+	gtk_html_set_default_engine (html, TRUE);
+
 	ContentType = soup_message_headers_get (msg->response_headers, "Content-type");
 
 	if (ContentType != NULL)
@@ -684,7 +887,7 @@ got_data (SoupSession *session, SoupMess
 }
 
 static void
-url_requested (GtkHTML *html, const char *url, GtkHTMLStream *handle, gpointer data)
+url_requested (GtkHTML *html, const gchar *url, GtkHTMLStream *handle, gpointer data)
 {
 	gchar *full_url = NULL;
 
@@ -695,10 +898,10 @@ url_requested (GtkHTML *html, const char
 		msg = soup_message_new (SOUP_METHOD_GET, full_url);
 		soup_session_queue_message (session, msg, got_data, handle);
 	} else if (full_url && !strncmp (full_url, "file:", 5)) {
-		char *filename = gtk_html_filename_from_uri (full_url);
+		gchar *filename = gtk_html_filename_from_uri (full_url);
 		struct stat st;
-		char *buf;
-		int fd, nread, total;
+		gchar *buf;
+		gint fd, nread, total;
 
 		fd = g_open (filename, O_RDONLY|O_BINARY, 0);
 		g_free (filename);
@@ -735,7 +938,7 @@ parse_href (const gchar *s)
 	gchar *tmp;
 	HTMLURL *tmpurl;
 
-	if(s == NULL || *s == 0)
+	if (s == NULL || *s == 0)
 		return g_strdup ("");
 
 	if (s[0] == '#') {
@@ -776,9 +979,12 @@ parse_href (const gchar *s)
 			}
 		} else {
 			html_url_destroy (tmpurl);
-			tmpurl = html_url_append_path (baseURL, s);
-			retval = html_url_to_string (tmpurl);
-			html_url_destroy (tmpurl);
+			if (baseURL) {
+				tmpurl = html_url_append_path (baseURL, s);
+				retval = html_url_to_string (tmpurl);
+				html_url_destroy (tmpurl);
+			} else
+				retval = g_strdup (s);
 		}
 	} else {
 		retval = html_url_to_string (tmpurl);
@@ -792,52 +998,48 @@ static void
 go_list_cb (GtkWidget *widget, gpointer data)
 {
 	go_item *item;
-	int num;
+	gint num;
 	/* Only if the item was selected, not deselected */
-	if(GTK_CHECK_MENU_ITEM(widget)->active) {
+	if (gtk_check_menu_item_get_active (GTK_CHECK_MENU_ITEM (widget))) {
 
-		go_position = GPOINTER_TO_INT(data);
+		go_position = GPOINTER_TO_INT (data);
 
-		if((item = g_list_nth_data(go_list, go_position))) {
+		if ((item = g_list_nth_data (go_list, go_position))) {
 
-			goto_url(item->url, 1);
-			num = g_list_length(go_list);
+			goto_url (item->url, 1);
+			num = g_list_length (go_list);
 
-			if(go_position == 0 || num < 2) {
-				gtk_widget_set_sensitive(popup_menu_forward, FALSE);
-				gtk_widget_set_sensitive(toolbar_forward, FALSE);
-				gtk_widget_set_sensitive(go_menu[1].widget, FALSE);
+			if (go_position == 0 || num < 2) {
+				gtk_widget_set_sensitive (popup_menu_forward, FALSE);
+				gtk_widget_set_sensitive (toolbar_forward, FALSE);
 			} else {
-				gtk_widget_set_sensitive(popup_menu_forward, TRUE);
-				gtk_widget_set_sensitive(toolbar_forward, TRUE);
-				gtk_widget_set_sensitive(go_menu[1].widget, TRUE);
+				gtk_widget_set_sensitive (popup_menu_forward, TRUE);
+				gtk_widget_set_sensitive (toolbar_forward, TRUE);
 			}
-			if(go_position == (num - 1) || num < 2) {
-				gtk_widget_set_sensitive(popup_menu_back, FALSE);
-				gtk_widget_set_sensitive(toolbar_back, FALSE);
-				gtk_widget_set_sensitive(go_menu[0].widget, FALSE);
+			if (go_position == (num - 1) || num < 2) {
+				gtk_widget_set_sensitive (popup_menu_back, FALSE);
+				gtk_widget_set_sensitive (toolbar_back, FALSE);
 			} else {
-				gtk_widget_set_sensitive(popup_menu_back, TRUE);
-				gtk_widget_set_sensitive(toolbar_back, TRUE);
-				gtk_widget_set_sensitive(go_menu[0].widget, TRUE);
+				gtk_widget_set_sensitive (popup_menu_back, TRUE);
+				gtk_widget_set_sensitive (toolbar_back, TRUE);
 			}
 		}
 	}
 }
 
-static void remove_go_list(gpointer data, gpointer user_data) {
+static void remove_go_list (gpointer data, gpointer user_data) {
 	go_item *item = (go_item *)data;
 
-	if(item->widget)
-		gtk_widget_destroy(item->widget);
+	if (item->widget)
+		gtk_widget_destroy (item->widget);
 
 	item->widget = NULL;
 }
 
 static void
-goto_url(const char *url, int back_or_forward)
+goto_url (const gchar *url, gint back_or_forward)
 {
-	int tmp, i;
+	gint tmp, i;
 	go_item *item;
 	GSList *group = NULL;
 	gchar *full_url;
@@ -846,13 +1048,13 @@ goto_url(const char *url, int back_or_fo
 	soup_session_abort (session);
 
 	/* Remove any pending redirection */
-	if(redirect_timerId) {
-		g_source_remove(redirect_timerId);
+	if (redirect_timerId) {
+		g_source_remove (redirect_timerId);
 
 		redirect_timerId = 0;
 	}
 
-	/* TODO2 gnome_animator_start (GNOME_ANIMATOR (animator)); */
+	/* TODO2 animator start */
 	html_stream_handle = gtk_html_begin_content (html, (gchar *)gtk_html_get_default_content_type (html));
 
 	/* Yuck yuck yuck.  Well this code is butt-ugly already
@@ -862,89 +1064,87 @@ goto_url(const char *url, int back_or_fo
 	on_set_base (NULL, full_url, NULL);
 	url_requested (html, url, html_stream_handle, NULL);
 
-	if(!back_or_forward) {
-		if(go_position) {
+	if (!back_or_forward) {
+		if (go_position) {
 			/* Removes "Forward entries"*/
 			tmp = go_position;
-			while(tmp) {
-				item = g_list_nth_data(go_list, --tmp);
-				go_list = g_list_remove(go_list, item);
-				if(item->url)
-					g_free(item->url);
-				if(item->title)
-					g_free(item->title);
-				if(item->url)
-					gtk_widget_destroy(item->widget);
-				g_free(item);
+			while (tmp) {
+				item = g_list_nth_data (go_list, --tmp);
+				go_list = g_list_remove (go_list, item);
+				if (item->url)
+					g_free (item->url);
+				if (item->title)
+					g_free (item->title);
+				if (item->url)
+					gtk_widget_destroy (item->widget);
+				g_free (item);
 			}
 			go_position = 0;
 		}
 
 		/* Removes old entries if the list is to big */
-		tmp = g_list_length(go_list);
-		while(tmp > MAX_GO_ENTRIES) {
-			item = g_list_nth_data(go_list, MAX_GO_ENTRIES);
-
-			if(item->url)
-				g_free(item->url);
-			if(item->title)
-				g_free(item->title);
-			if(item->url)
-				gtk_widget_destroy(item->widget);
-			g_free(item);
+		tmp = g_list_length (go_list);
+		while (tmp > MAX_GO_ENTRIES) {
+			item = g_list_nth_data (go_list, MAX_GO_ENTRIES);
+
+			if (item->url)
+				g_free (item->url);
+			if (item->title)
+				g_free (item->title);
+			if (item->url)
+				gtk_widget_destroy (item->widget);
+			g_free (item);
 
-			go_list = g_list_remove(go_list, item);
+			go_list = g_list_remove (go_list, item);
 			tmp--;
 		}
-		gtk_widget_set_sensitive(popup_menu_forward, FALSE);
-		gtk_widget_set_sensitive(toolbar_forward, FALSE);
-		gtk_widget_set_sensitive(go_menu[1].widget, FALSE);
+		gtk_widget_set_sensitive (popup_menu_forward, FALSE);
+		gtk_widget_set_sensitive (toolbar_forward, FALSE);
 
-		item = g_malloc0(sizeof(go_item));
-		item->url = g_strdup(full_url);
+		item = g_malloc0 (sizeof (go_item));
+		item->url = g_strdup (full_url);
 
 		/* Remove old go list */
-		g_list_foreach(go_list, remove_go_list, NULL);
+		g_list_foreach (go_list, remove_go_list, NULL);
 
 		/* Add new url to go list */
-		go_list = g_list_prepend(go_list, item);
+		go_list = g_list_prepend (go_list, item);
 
 		/* Create a new go list menu */
-		tmp = g_list_length(go_list);
+		tmp = g_list_length (go_list);
 		group = NULL;
 
-		for(i=0;i<tmp;i++) {
-			item = g_list_nth_data(go_list, i);
-			item->widget = gtk_radio_menu_item_new_with_label(group, item->url);
+		for (i=0;i<tmp;i++) {
+
+			item = g_list_nth_data (go_list, i);
+			item->widget = gtk_radio_menu_item_new_with_label (group, item->url);
 
 			g_signal_connect (item->widget, "activate",
 					  G_CALLBACK (go_list_cb), GINT_TO_POINTER (i));
 
-			group = gtk_radio_menu_item_get_group(GTK_RADIO_MENU_ITEM(item->widget));
+			group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (item->widget));
 
-			if(i == 0)
-				gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(item->widget), TRUE);
+			if (i == 0)
+				gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item->widget), TRUE);
 
-			gtk_menu_shell_append (GTK_MENU_SHELL (GTK_MENU_ITEM(main_menu[3].widget)->submenu), item->widget);
-			gtk_widget_show(item->widget);
+			gtk_widget_show (item->widget);
 
 		}
 		/* Enable the "Back" button if there are more then one url in the list */
-		if(g_list_length(go_list) > 1) {
+		if (g_list_length (go_list) > 1) {
 
-			gtk_widget_set_sensitive(popup_menu_back, TRUE);
-			gtk_widget_set_sensitive(toolbar_back, TRUE);
-			gtk_widget_set_sensitive(go_menu[0].widget, TRUE);
+			gtk_widget_set_sensitive (popup_menu_back, TRUE);
+			gtk_widget_set_sensitive (toolbar_back, TRUE);
 		}
 	} else {
 		/* Update current link in the go list */
-		item = g_list_nth_data(go_list, go_position);
-		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(item->widget), TRUE);
+		item = g_list_nth_data (go_list, go_position);
+		gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item->widget), TRUE);
 	}
 
-	if(redirect_url) {
+	if (redirect_url) {
 
-		g_free(redirect_url);
+		g_free (redirect_url);
 		redirect_url = NULL;
 	}
 	g_free (full_url);
@@ -957,26 +1157,11 @@ bug_cb (GtkWidget *widget, gpointer data
 
 	cwd = g_get_current_dir ();
 	filename = g_strdup_printf("%s/bugs.html", cwd);
-	url = g_filename_to_uri(filename, NULL, NULL);
-	goto_url(url, 0);
-	g_free(url);
-	g_free(filename);
-	g_free(cwd);
-}
-
-static void
-test_cb (GtkWidget *widget, gpointer data)
-{
-	gchar *cwd, *filename, *url;
-
-	cwd = g_get_current_dir ();
-	filename = g_strdup_printf ("%s/tests/test%d.html", cwd,
-				    GPOINTER_TO_INT (data));
 	url = g_filename_to_uri (filename, NULL, NULL);
-	goto_url(url, 0);
-	g_free(url);
-	g_free(filename);
-	g_free(cwd);
+	goto_url (url, 0);
+	g_free (url);
+	g_free (filename);
+	g_free (cwd);
 }
 
 static void
@@ -985,25 +1170,14 @@ exit_cb (GtkWidget *widget, gpointer dat
 	gtk_main_quit ();
 }
 
-/* static struct poptOption options[] = {
-  {"slow-loading", '\0', POPT_ARG_NONE, &slow_loading, 0, "Load the document as slowly as possible", NULL},
-  {"exit-when-done", '\0', POPT_ARG_NONE, &exit_when_done, 0, "Exit the program as soon as the document is loaded", NULL},
-  {NULL}
-  }; */
-
 static gboolean
 motion_notify_event (GtkHTML *html, GdkEventMotion *event, gpointer data)
 {
-	const char *id;
-	GnomeApp *app;
-
-	app = GNOME_APP (data);
+	const gchar *id;
 
 	id = gtk_html_get_object_id_at (html, event->x, event->y);
 	if (id)
-		gnome_appbar_set_status (GNOME_APPBAR (app->statusbar), id);
-	else
-		gnome_appbar_set_status (GNOME_APPBAR (app->statusbar), "");
+		change_status_bar (GTK_STATUSBAR (statusbar), id);
 
 	return FALSE;
 }
@@ -1011,44 +1185,83 @@ motion_notify_event (GtkHTML *html, GdkE
 gint
 main (gint argc, gchar *argv[])
 {
-	GtkWidget *app, *bar;
+	GtkWidget *app, *bar, *main_table;
 	GtkWidget *html_widget;
 	GtkWidget *scrolled_window;
+	GtkActionGroup *action_group;
+	GtkUIManager *merge;
+	GError *error = NULL;
+#ifdef HAVE_NEWSOUP
+	SoupCookieJar *cookie_jar;
+#endif
 
 #ifdef MEMDEBUG
-	void *p = malloc (1024);	/* to make linker happy with ccmalloc */
+	gpointer p = malloc (1024);	/* to make linker happy with ccmalloc */
 #endif
-	/* gnome_init_with_popt_table (PACKAGE, VERSION,
-	   argc, argv, options, 0, &ctx); */
-	gnome_program_init ("testgtkhtml", VERSION, LIBGNOMEUI_MODULE, argc, argv,
 
-			    GNOME_PARAM_HUMAN_READABLE_NAME, _("GtkHTML Test Application"),
-			    NULL);
+	gtk_init (&argc, &argv);
 
-	app = gnome_app_new ("testgtkhtml", "GtkHTML: testbed application");
+	app = gtk_window_new (GTK_WINDOW_TOPLEVEL);
 
 	g_signal_connect (app, "delete_event", G_CALLBACK (exit_cb), NULL);
 
-	create_toolbars (app);
-	bar = gnome_appbar_new (FALSE, TRUE, GNOME_PREFERENCES_USER);
-	gnome_app_set_statusbar (GNOME_APP (app), bar);
-	gnome_app_create_menus (GNOME_APP (app), main_menu);
-
-	/* Disable back and forward on the Go menu */
-	gtk_widget_set_sensitive(go_menu[0].widget, FALSE);
-	gtk_widget_set_sensitive(go_menu[1].widget, FALSE);
-
-	gnome_app_install_menu_hints (GNOME_APP (app), main_menu);
-
 	scrolled_window = gtk_scrolled_window_new (NULL, NULL);
 
 	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
 					GTK_POLICY_AUTOMATIC,
 					GTK_POLICY_AUTOMATIC);
 
-	gnome_app_set_contents (GNOME_APP (app), scrolled_window);
+	statusbar = gtk_statusbar_new ();
+	/* Menus */
+	action_group = gtk_action_group_new ("AppWindowActions");
+	gtk_action_group_add_actions (action_group,
+	    entries, G_N_ELEMENTS (entries),
+	    scrolled_window);
+
+	merge = gtk_ui_manager_new ();
+	g_object_set_data_full (G_OBJECT (scrolled_window), "ui-manager", merge,
+			      g_object_unref);
+
+	gtk_ui_manager_insert_action_group (merge, action_group, 0);
+	gtk_window_add_accel_group (GTK_WINDOW (app),
+				  gtk_ui_manager_get_accel_group (merge));
+
+	if (!gtk_ui_manager_add_ui_from_string (merge, ui_info, -1, &error)) {
+	  g_message ("building menus failed: %s", error->message);
+	  g_error_free (error);
+	}
 
-	session = soup_session_async_new ();
+	bar = gtk_ui_manager_get_widget (merge, "/MenuBar");
+	gtk_widget_show (bar);
+	/* main table*/
+	main_table = gtk_table_new (1, 4, FALSE);
+
+	gtk_table_attach (GTK_TABLE (main_table),
+                        bar,
+                        /* X direction */       /* Y direction */
+                        0, 1,                   0, 1,
+                        GTK_EXPAND | GTK_FILL,  GTK_SHRINK,
+                        0,                      0);
+	gtk_table_attach (GTK_TABLE (main_table),
+                        create_toolbars (),
+                        /* X direction */       /* Y direction */
+                        0, 1,                   1, 2,
+                        GTK_EXPAND | GTK_FILL,  GTK_SHRINK,
+                        0,                      0);
+	gtk_table_attach (GTK_TABLE (main_table),
+                        scrolled_window,
+                        /* X direction */       /* Y direction */
+                        0, 1,                   2, 3,
+                        GTK_EXPAND | GTK_FILL,  GTK_EXPAND | GTK_FILL,
+                        0,                      0);
+	gtk_table_attach (GTK_TABLE (main_table),
+                        statusbar,
+                        /* X direction */       /* Y direction */
+                        0, 1,                   3, 4,
+                        GTK_EXPAND | GTK_FILL,  GTK_SHRINK,
+                        0,                      0);
+	/*app*/
+	gtk_container_add (GTK_CONTAINER (app), main_table);
 
 	html_widget = gtk_html_new ();
 	html = GTK_HTML (html_widget);
@@ -1060,7 +1273,7 @@ main (gint argc, gchar *argv[])
 	gtk_container_add (GTK_CONTAINER (scrolled_window), html_widget);
 
 	/* Create a popup menu with disabled back and forward items */
-	popup_menu = gtk_menu_new();
+	popup_menu = gtk_menu_new ();
 
 	popup_menu_back = gtk_menu_item_new_with_label ("Back");
 	gtk_widget_set_sensitive (popup_menu_back, FALSE);
@@ -1096,7 +1309,7 @@ main (gint argc, gchar *argv[])
 	g_signal_connect (html, "motion_notify_event", G_CALLBACK (motion_notify_event), app);
 
 #if 0
-	gtk_box_pack_start_defaults (GTK_BOX (hbox), GTK_WIDGET (html));
+	gtk_box_pack_start (GTK_BOX (hbox), GTK_WIDGET (html), TRUE, TRUE, 0);
 	vscrollbar = gtk_vscrollbar_new (GTK_LAYOUT (html)->vadjustment);
 	gtk_box_pack_start (GTK_BOX (hbox), vscrollbar, FALSE, TRUE, 0);
 
@@ -1108,8 +1321,15 @@ main (gint argc, gchar *argv[])
 
 	gtk_widget_show_all (app);
 
-	if (argc > 1 && *argv [argc - 1] != '-')
-		goto_url (argv [argc - 1], 0);
+	session = soup_session_async_new ();
+
+#ifdef HAVE_NEWSOUP
+	cookie_jar = soup_cookie_jar_text_new ("./cookies.txt", FALSE);
+	soup_session_add_feature (session, SOUP_SESSION_FEATURE (cookie_jar));
+#endif
+
+	if (argc > 1 && *argv[argc - 1] != '-')
+		goto_url (argv[argc - 1], 0);
 
 	gtk_main ();
 
Index: gtkhtml3/gtkhtml/gtk-compat.h
===================================================================
--- /dev/null
+++ gtkhtml3/gtkhtml/gtk-compat.h
@@ -0,0 +1,53 @@
+#ifndef __GTK_COMPAT_H__
+#define __GTK_COMPAT_H__
+
+#include <gtk/gtk.h>
+
+/* Provide a GTK+ compatibility layer. */
+
+#if !GTK_CHECK_VERSION (2,23,0)
+#define GTK_COMBO_BOX_TEXT		GTK_COMBO_BOX
+#define gtk_combo_box_text_new		gtk_combo_box_new_text
+#define gtk_combo_box_text_append_text	gtk_combo_box_append_text
+#endif
+
+#if !GTK_CHECK_VERSION (2,23,0)
+#define gdk_window_get_display		gdk_drawable_get_display
+#define gdk_window_get_visual		gdk_drawable_get_visual
+#endif
+
+/* For use with GTK+ key binding functions. */
+#if GTK_CHECK_VERSION (2,91,0)
+#define COMPAT_BINDING_TYPE	G_OBJECT
+#else
+#define COMPAT_BINDING_TYPE	GTK_OBJECT
+#endif
+
+#if !GTK_CHECK_VERSION (2,91,0)
+
+#define gtk_widget_get_preferred_size(widget, minimum_size, natural_size) \
+	(gtk_widget_size_request ((widget), (minimum_size)))
+
+#define gdk_window_set_background_pattern(window, pattern) \
+	(gdk_window_set_back_pixmap ((window), NULL, FALSE))
+
+#endif /* < 2.91.0 */
+
+#if GTK_CHECK_VERSION (2,90,5)
+
+/* Recreate GdkRegion until we drop GTK2 compatibility. */
+
+#define GdkRegion cairo_region_t
+
+#define gdk_region_new()		cairo_region_create()
+#define gdk_region_destroy(region)	cairo_region_destroy (region)
+
+#define gdk_region_union_with_rect(region, rect) \
+	G_STMT_START { \
+		if ((rect)->width > 0 && (rect)->height > 0) \
+			cairo_region_union_rectangle ((region), (rect)); \
+	} G_STMT_END
+
+#endif /* >= 2.90.5 */
+
+#endif /* __GTK_COMPAT_H__ */
