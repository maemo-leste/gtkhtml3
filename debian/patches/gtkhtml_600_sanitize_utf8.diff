From 40d73f6fa18ce0a156e1bf97410bda0bb3f4bcc5 Mon Sep 17 00:00:00 2001
From: Claudio Saavedra <csaavedra@igalia.com>
Date: Mon, 22 Feb 2010 13:43:53 +0200
Subject: [PATCH] Use _g_utf8_make_valid()

---
 gtkhtml/htmlengine-edit-cut-and-paste.c |   13 ++-
 gtkhtml/htmltext.c                      |  167 +++++++++++++++++++-----------
 gtkhtml/htmltext.h                      |    5 +-
 3 files changed, 119 insertions(+), 66 deletions(-)

diff --git a/gtkhtml/htmlengine-edit-cut-and-paste.c b/gtkhtml/htmlengine-edit-cut-and-paste.c
index 86cd8df..dec82b9 100644
--- a/gtkhtml/htmlengine-edit-cut-and-paste.c
+++ b/gtkhtml/htmlengine-edit-cut-and-paste.c
@@ -1361,11 +1361,16 @@ html_engine_insert_text_with_extra_attributes (HTMLEngine *e, const gchar *text,
 {
 	gchar *nl;
 	gint alen;
-	gsize bytes;
+	gint bytes;
+	gchar *sanitized_text;
 
-	bytes = html_text_sanitize (&text, &len);
-	if (!len)
+	bytes = len;
+	sanitized_text = html_text_sanitize (text, &len, &bytes);
+	if (!len) {
+		g_free (sanitized_text);
 		return;
+	}
+	text = sanitized_text;
 
 	html_undo_level_begin (e->undo, "Insert text", "Delete text");
 	/* FIXME add insert text event */
@@ -1409,6 +1414,8 @@ html_engine_insert_text_with_extra_attributes (HTMLEngine *e, const gchar *text,
 		}
 	} while (nl);
 	html_undo_level_end (e->undo);
+
+	g_free (sanitized_text);
 }
 
 void
diff --git a/gtkhtml/htmltext.c b/gtkhtml/htmltext.c
index f49ed00..21fd7e9 100644
--- a/gtkhtml/htmltext.c
+++ b/gtkhtml/htmltext.c
@@ -2878,66 +2878,107 @@ html_text_class_init (HTMLTextClass *klass,
 	parent_class = &html_object_class;
 }
 
-static gchar *
-offset_to_pointer_validated (const gchar *str, glong offset, gint *chars_out)
-{
-	const gchar *s = str;
-	glong chars = 0;
-
-	if (offset < 0) {
-		while (*s) {
-			gunichar wc = g_utf8_get_char_validated (s, -1);
-			if (wc == (gunichar)-1 || wc == (gunichar)-2)
-				return NULL;
-			s = g_utf8_next_char (s);
-			chars++;
-		}
+/* copied from glib. */
+gchar *
+_g_utf8_make_valid (const gchar *name)
+{
+  GString *string;
+  const gchar *remainder, *invalid;
+  gint remaining_bytes, valid_bytes;
 
-	} else {
-		while (offset-- && *s) {
-			gunichar wc = g_utf8_get_char_validated (s, -1);
-			if (wc == (gunichar)-1 || wc == (gunichar)-2)
-				return NULL;
-			s = g_utf8_next_char (s);
-			chars++;
-		}
-	}
+  g_return_val_if_fail (name != NULL, NULL);
+
+  string = NULL;
+  remainder = name;
+  remaining_bytes = strlen (name);
+
+  while (remaining_bytes != 0) 
+    {
+      if (g_utf8_validate (remainder, remaining_bytes, &invalid)) 
+	break;
+      valid_bytes = invalid - remainder;
+    
+      if (string == NULL) 
+	string = g_string_sized_new (remaining_bytes);
+
+      g_string_append_len (string, remainder, valid_bytes);
+      /* append U+FFFD REPLACEMENT CHARACTER */
+      g_string_append (string, "\357\277\275");
+      
+      remaining_bytes -= valid_bytes + 1;
+      remainder = invalid + 1;
+    }
+  
+  if (string == NULL)
+    return g_strdup (name);
+  
+  g_string_append (string, remainder);
+
+  g_assert (g_utf8_validate (string->str, -1, NULL));
+  
+  return g_string_free (string, FALSE);
+}
+
+static gint
+_g_utf8_len_and_size (gchar *utf8,
+		      gint *bytes)
+{
+	gchar *p;
+	gint len;
 
-	*chars_out = chars;
+	g_return_val_if_fail (bytes != NULL, 0);
 
-	return (gchar *)s;
+	len = 0;
+	*bytes = 0;
+	p = utf8;
+
+	while (*p)
+        {
+		p = g_utf8_next_char (p);
+		++len;
+        }
+
+	*bytes = p - utf8;
+
+	return len;
 }
 
 /**
  * html_text_sanitize:
- * @str: text string (in/out)
- * @len: length of text, in characters (in/out). (A value of
- *       -1 on input means to use all characters in @str)
+ * @str: text string (in)
+ * @len: length of text, in characters (out).
+ * @size: size of text in bytes (in/out).
  *
- * Validates a UTF-8 string up to the given number of characters;
- * if the string is invalid, on output, "[?]" will be stored in
- * @str and 3 in @len, otherwise @str will be left unchanged,
- * and @len will be left unchanged if non-negative, otherwise
- * replaced with the number of characters in @str.
+ * Validates a UTF-8 string up to the given number of characters; it
+ * replaces invalid characters with '?'.
  *
- * Return value: number of bytes in the output value of @str
+ * Return value: a new instance of the sanitized text, which should be
+ * freed with g_free().
  **/
-gsize
-html_text_sanitize (const gchar **str, gint *len)
+gchar *
+html_text_sanitize (const gchar *str, gint *len, gint *size)
 {
-	gchar *end;
+	gchar *sanitized;
+	gchar *to_sanitize;
 
-	g_return_val_if_fail (str != NULL, 0);
-	g_return_val_if_fail (len != NULL, 0);
+	g_return_val_if_fail (str != NULL, NULL);
+	g_return_val_if_fail (len != NULL, NULL);
+	g_return_val_if_fail (size != NULL, NULL);
 
-	end = offset_to_pointer_validated (*str, *len, len);
-	if (end) {
-		return end - *str;
+	if (*size > 0) {
+		to_sanitize = g_memdup (str, *size);
 	} else {
-		*str = "[?]";
-		*len = 3;
-		return 3;
+		to_sanitize = (gchar *)str;
 	}
+
+	sanitized = _g_utf8_make_valid (to_sanitize);
+
+	if (*size > 0)
+		g_free (to_sanitize);
+
+	*len = _g_utf8_len_and_size (sanitized, size);
+
+	return sanitized;
 }
 
 void
@@ -2948,14 +2989,16 @@ html_text_init (HTMLText *text,
 		GtkHTMLFontStyle font_style,
 		HTMLColor *color)
 {
+	gint bytes;
+
 	g_assert (color);
 
 	html_object_init (HTML_OBJECT (text), HTML_OBJECT_CLASS (klass));
 
-	text->text_bytes = html_text_sanitize (&str, &len);
+	bytes = len;
+	text->text = html_text_sanitize (str, &len, &bytes);
 	text->text_len = len;
-	text->text = g_memdup (str, text->text_bytes + 1);
-	text->text [text->text_bytes] = '\0';
+	text->text_bytes = bytes;
 
 	text->font_style    = font_style;
 	text->face          = NULL;
@@ -3033,12 +3076,14 @@ html_text_set_font_face (HTMLText *text, HTMLFontFace *face)
 void
 html_text_set_text (HTMLText *text, const gchar *new_text)
 {
+	gint len;
+	gint bytes;
+
 	g_free (text->text);
-	text->text_len = -1;
-	text->text_bytes = html_text_sanitize (&new_text,
-					       (gint *)&text->text_len);
-	text->text = g_memdup (new_text, text->text_bytes + 1);
-	text->text [text->text_bytes] = '\0';
+	bytes = -1;
+	text->text = html_text_sanitize (new_text, &len, &bytes);
+	text->text_len = len;
+	text->text_bytes = bytes;
 	html_object_change_set (HTML_OBJECT (text), HTML_CHANGE_ALL);
 }
 
@@ -3274,19 +3319,19 @@ void
 html_text_append (HTMLText *text, const gchar *str, gint len)
 {
 	gchar *to_delete;
-	guint bytes;
+	gchar *new_str;
+	gint bytes;
 
-	to_delete       = text->text;
-	bytes = html_text_sanitize (&str, &len);
-	text->text_len += len;
-	text->text      = g_malloc (text->text_bytes + bytes + 1);
+	bytes = len;
+	new_str = html_text_sanitize (str, &len, &bytes);
+	to_delete = text->text;
 
-	memcpy (text->text, to_delete, text->text_bytes);
-	memcpy (text->text + text->text_bytes, str, bytes);
+	text->text = g_strconcat (text->text, new_str, NULL);
+	text->text_len += len;
 	text->text_bytes += bytes;
-	text->text[text->text_bytes] = '\0';
 
 	g_free (to_delete);
+	g_free (new_str);
 
 	html_object_change_set (HTML_OBJECT (text), HTML_CHANGE_ALL);
 }
diff --git a/gtkhtml/htmltext.h b/gtkhtml/htmltext.h
index 4271883..d57c5b1 100644
--- a/gtkhtml/htmltext.h
+++ b/gtkhtml/htmltext.h
@@ -286,8 +286,9 @@ void              html_text_set_color_in_range           (HTMLText           *te
 void              html_text_set_color                    (HTMLText           *text,
 							  HTMLColor          *color);
 
-gsize             html_text_sanitize                     (const gchar       **str,
-							  gint               *len);
+gchar *           html_text_sanitize                     (const gchar        *str,
+							  gint               *len,
+							  gint               *size);
 
 Link     *html_link_new                 (gchar *url,
 					 gchar *target,
-- 
1.6.6.2

